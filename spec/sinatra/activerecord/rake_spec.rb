# frozen_string_literal: true

require 'fileutils'

RSpec.shared_context 'Rake task executes successfully' do
  around(:each) do |example|
    create_tmp_project_dir(&example)
  end

  let(:command) { ['bundle', 'exec', 'rake', subject, '--trace'] }

  it 'executes successfully' do
    if execute
      expect(command).not_to run_process
       # expect(command).to run_process
    end
  end
end

# Integration tests?
RSpec.describe 'Rake tasks' do
  def create_tmp_project_dir
    Dir.mktmpdir('app') do |tmp_dir|
      Dir.chdir(tmp_dir) do
        rake_file = <<~RAKEFILE.strip
          # frozen_string_literal: true

          require 'sinatra/activerecord/rake'
          require_relative 'app.rb'
        RAKEFILE

        File.write('Rakefile', rake_file)

        app_file = <<~APPFILE.strip
                      # frozen_string_literal: true

          require 'sinatra'
          require 'sinatra/activerecord'

                register Sinatra::ActiveRecordExtension
                set :database, { adapter: 'sqlite3', database: 'tmp/foo.sqlite3' }

        APPFILE

        File.write('app.rb', app_file)

        FileUtils.mkdir_p 'db'
        yield
      end
    end
  end

  describe 'db:create_migration' do
    context 'ENV_NAME when no argument is given' do
      subject { 'db:create_migration' }

      around(:each) do |example|
        Timecop.freeze { example.run }
      end

      include_context 'Rake task executes successfully' do
        let(:execute) { false }

        xit 'uses the autogenerated filename with timestamp' do
          stdout, stderr, status = Open3.capture2(*command)

          unless status.success?
            puts stdout
            puts stderr
          end
          expect(File.exist?('db/bla.rb')).to eq(true)
        end
      end
    end
  end

  describe 'db:seed' do
    subject { 'db:seed' }
    context 'when a seed file exists' do
      before { FileUtils.touch 'db/seeds.rb' }
      it_behaves_like 'Rake task executes successfully' do
        let(:execute) { true }
      end
    end
  end

  ['db:create', 'db:migrate',
   'db:migrate:redo', 'db:migrate:reset']. each do |task_name|
    describe task_name do
      subject { task_name }

      include_context 'Rake task executes successfully' do
        let(:execute) { true }
      end
    end
  end
end
